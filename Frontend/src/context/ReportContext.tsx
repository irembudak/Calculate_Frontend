import { createContext, useContext, useState, ReactNode } from "react";
import jsPDF from "jspdf"; // âœ… jsPDF default import

// ğŸ”¹ Tek bir raporun yapÄ±sÄ±nÄ± tanÄ±mlÄ±yoruz
export interface Report {
    id: string; // raporun benzersiz ID'si
    title: string; // rapor baÅŸlÄ±ÄŸÄ± (Ã¶rn. BasÄ±nÃ§ Hesaplama)
    inputs: Record<string, number | string>; // girilen deÄŸerler
    result: string; // hesaplanan sonuÃ§
    createdAt: string; // oluÅŸturulma tarihi
}

// ğŸ”¹ Context iÃ§inde kullanÄ±lacak tipler
interface ReportContextType {
    reports: Report[]; // tÃ¼m rapor listesi
    addReport: (report: Report) => void; // sadece yeni rapor ekleme
    exportToPDF: (report: Report) => void; // tek raporu PDF olarak indirme
    saveAndExportReport: ( // hesaplama sayfalarÄ±ndan Ã§aÄŸrÄ±lacak fonksiyon
        title: string,
        inputs: Record<string, number | string>,
        result: string
    ) => void;
}

// ğŸ”¹ Context oluÅŸturma
const ReportContext = createContext<ReportContextType | undefined>(undefined);

// ğŸ”¹ Provider: tÃ¼m uygulamaya rapor state'ini saÄŸlar
export const ReportProvider = ({ children }: { children: ReactNode }) => {
    const [reports, setReports] = useState<Report[]>([]); // raporlarÄ± tutan state

    // âœ… 1. Yeni rapor ekleme
    const addReport = (report: Report) => {
        setReports((prev) => [...prev, report]);
    };

    // âœ… 2. Tek raporu PDF olarak indirme
    const exportToPDF = (report: Report) => {
        const doc = new jsPDF();

        // BaÅŸlÄ±k
        doc.setFontSize(16);
        doc.text(`${report.title} Raporu`, 10, 10);

        // Tarih
        doc.setFontSize(10);
        doc.text(`Tarih: ${report.createdAt}`, 10, 20);

        // Inputlar
        let y = 40;
        Object.entries(report.inputs).forEach(([key, val]) => {
            doc.text(`${key}: ${val}`, 20, y);
            y += 10;
        });

        // SonuÃ§
        y += 10;
        doc.setFontSize(12);
        doc.text(`SonuÃ§: ${report.result}`, 10, y);

        // PDF indir
        doc.save(`${report.title.toLowerCase().replace(/\s+/g, "-")}-rapor.pdf`);
    };

    // âœ… 3. Hesaplama sayfalarÄ±nda kullanÄ±lan fonksiyon
    // ArtÄ±k sadece rapora kaydediyor, PDF indirmiyor!
    const saveAndExportReport = (
        title: string,
        inputs: Record<string, number | string>,
        result: string
    ) => {
        const report: Report = {
            id: Date.now().toString(),
            title,
            inputs,
            result,
            createdAt: new Date().toLocaleString(),
        };
        addReport(report); // sadece kaydetme iÅŸlemi
    };

    return (
        <ReportContext.Provider
            value={{ reports, addReport, exportToPDF, saveAndExportReport }}
        >
            {children}
        </ReportContext.Provider>
    );
};

// ğŸ”¹ Hook: kolay kullanÄ±m iÃ§in
export const useReports = () => {
    const context = useContext(ReportContext);
    if (!context) {
        throw new Error("useReports must be used within a ReportProvider");
    }
    return context;
};
